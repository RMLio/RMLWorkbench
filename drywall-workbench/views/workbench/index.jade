extends ../../layouts/default

block head
  title Workbench
  script(type='text/javascript' src='/vendor/jquery/jquery.js' )
  script(type='text/javascript' src='/vendor/jquery.cookie/jquery.cookie.js')
  script(type='text/javascript' src='/js/jquery.form.js')
  script(type='text/javascript' src='/js/file_uploads.js')
  script(type='text/javascript' src='/vendor/underscore/underscore.js')
  script(type='text/javascript' src='/vendor/backbone/backbone.js')

block neck
  link(rel='stylesheet', href='/views/workbench/index.min.css?#{cacheBreaker}')

block body
  div.page-header
    h1 Workbench
  div.row
    div.col-md-4
      div(class='panel panel-primary')
        div.panel-heading
          h3.panel-title Step 1: Input
        div.panel-body.text-center
          div.btn-group-vertical(role='group')
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#upload-input').
              Upload File
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#db-input').
              External Database
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#api-input').
              Web API
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#rdf-input').
              RDF Source
   
    div.col-md-4
      div(class='panel panel-primary')
        div.panel-heading
          h3.panel-title Step 2: Mapping
        div.panel-body.text-center(id='mapping-rules')
          textarea.hidden(id='mapping-rules-text' rows='20' cols='80')
          div.btn-group-vertical(role='group')
            form(id='mapping-upload-form' enctype='multipart/form-data' action='/upload/mapping' method='post')
              input(type='hidden', name='_csrf', value=_csrf)
              label(class='btn btn-primary btn-lg' for='mapping-upload-input')
                 | Upload Mapping triples
                 input(type='file' id='mapping-upload-input' name='mappingUpload' style='display:none;' data-allowed-file-extensions="['rml.ttl', 'rml', 'ttl']")
             
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#existingRML').
              Choose existing rules
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#newRML').
              Create new RML document
            a.button(type='button' class='btn btn-primary btn-lg' href='/execute').
              Execute mapping

    div.col-md-4
      div(class='panel panel-primary')
        div.panel-heading
          h3.panel-title Step 3: Publish
        div.panel-body.text-center
          div.btn-group-vertical(role='group')
            a.btn.btn-primary.btn-lg(data-toggle='modal' data-target='#publish')
              | Publish 
            button(type='button' class='btn btn-primary btn-lg' data-toggle='modal' data-target='#schedule').
              Schedule
            a.btn.btn-primary.btn-lg(onclick="window.open('http://localhost:5000/', '_blank');")
              | Local LDF Server
            a.btn.btn-primary.btn-lg(href='/download/rdf')
              | Download RDF
              
              
              
  div(id='upload-input' class='modal fade' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' style='display: none;')
    div.modal-dialog(role='document')
      div.modal-content
        div.modal-header
          button.close(type='button' data-dismiss='modal' aria-label='Close')
            span(aria-hidden='true') ×
          h4.modal-title Upload an input file
        div.modal-body
          h4 Format
          p Currently only XML, CSV and JSON are supported.
          label(class='btn btn-primary' for='my-file-selector')
            input(id='my-file-selector' type='file' style='display:none;' data-allowed-file-extensions="['csv', 'xml', 'txt', 'json']")
            | Choose a file

  div(id='upload-mapping' class='modal fade' tabindex='-1' role='dialog' aria-labelledby='AreTheseUsed' style='display: none;')
    div.modal-dialog(role='document')
      div.modal-content
        div.modal-header
          button.close(type='button' data-dismiss='modal' aria-label='Close')
            span(aria-hidden='true') ×
          h4.modal-title Upload an RML file
        div.modal-body
          h4 File format
          p Currently only XML, CSV and JSON are supported. We will attempt to 
          label(class='btn btn-primary' for='mapping-selector')
            input(id='mapping-selector' type='file' style='display:none;' data-allowed-file-extensions="['rml.ttl', 'rml', 'ttl']")
            |  Choose a mapping file

   div(id='publish' class='modal fade' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' style='display: none;')
    div.modal-dialog(role='document')
      div.modal-content
        div.modal-header
          button.close(type='button' data-dismiss='modal' aria-label='Close')
            span(aria-hidden='true') ×
          h4.modal-title Publish To LDF Server
        div.modal-body
          form(role="form")
            div(class="form-group")
              label(for="title")
                | Title
              input(class="form-control" id="publish_title" placeholder="Enter title")
            div(class="form-group")
              label(for="type")
                | Type
              select(name="type" id='publish_type' form="typeform" class="form-control")
                option(value="HdtDataSource") 
                    | HDT file
                option(value="TurtleDatasource")
                    | N-Triples document
                option(value="TurtleDatasource")
                    | Turtle document
                option(value="SparqlDatasource") 
                    | SPARQL endpoint
                option(value='JsonLdDatasource')
                    | JSON-LD document
            div(class="form-group")
              label(for="description")
                | Description
              input(class="form-control" id="publish_description" placeholder="Enter description")       
            div(class="form-group")
              label(for="setting")
                | File
              select(name="type" form="typeform" class="form-control")
                option(value="./output.rdf") 
                    | File 1
                option(value="./output.rdf")
                    | File 2
                option(value="./output.rdf")
                    | File 3                                                    
            
            button(type="submit" id='publish_submit' class="btn btn-default")
                | Publish
                
  script(type="text/javascript").
  
    //configure backbone
    var oldSync = Backbone.sync;
    Backbone.sync = function(method, model, options){
            options.beforeSend = function(xhr){
                xhr.setRequestHeader('X-CSRFToken', $.cookie('_csrfToken'));
            };
        return oldSync(method, model, options);
    };
  
    var PublishLdfModel = Backbone.Model.extend({
        urlRoot: '/publish/ldf',
        defaults: {
            title: '',
            type: '',
            description: '',
            setting: {}
        }
    });    
    
    var PublishLdfView = Backbone.View.extend({   
        //initialize     
        initialize: function(){          
            
        },
        //listen to events
        events: {
            "click button[id='publish_submit']": "publish"
        },
        //execute this when publish button is clicked 
        publish: function(event){            
            //details to save in the backbone model           
            var publishDetails = {
                //TO DO: correct backbone usage
                title: $("#publish_title").val(),
                type: $("#publish_type").val(),
                description: $("#publish_description").val(),
                setting: {file:'./output.rdf'}
            };
            //save
            var publishModel = new PublishLdfModel();            
            publishModel.save(publishDetails, {                
                success: function (publishModel) {
                    alert(JSON.stringify(publishModel));
                }
            })            
        }
    });
    //bind view to DOM
    var publishView = new PublishLdfView({ el: $("#publish") });
    
             